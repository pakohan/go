package {{remove_underscores .Model.TableName | plural}}

import (
	"log"
	"net/http"

	"{{.Model.ProjectImportPath}}/model"
	"{{.Model.ProjectImportPath}}/model/{{remove_underscores .Model.TableName}}"
	"{{.Model.ProjectImportPath}}/service"
	"github.com/pakohan/go/httphelper"
)

func New(l *log.Logger, m *model.Model, s *service.Service) http.Handler {
	c := &controller{
		l: l,
		m: m,
		s: s,
	}

	sm := http.NewServeMux()

	sm.HandleFunc("GET /{{plural .Model.TableName}}/", c.list)
	sm.HandleFunc("POST /{{plural .Model.TableName}}/", c.create)
	sm.HandleFunc("GET /{{plural .Model.TableName}}/{id}", c.get)
	sm.HandleFunc("PUT /{{plural .Model.TableName}}/{id}", c.update)
	sm.HandleFunc("DELETE /{{plural .Model.TableName}}/{id}", c.delete)

	return sm
}

type controller struct {
	l *log.Logger
	m *model.Model
	s *service.Service
}

func (c *controller) list(w http.ResponseWriter, r *http.Request) {
	res, err := httphelper.ListFromQuery[{{remove_underscores .Model.TableName}}.{{pascal .Model.TableName}}, {{remove_underscores .Model.TableName}}.Filter](r.URL.Query())
	if err != nil {
		httphelper.ServeResponse(w, r, err)
		return
	}

	ok := true // simplifies the template a lot
	_ = ok
	{{range .Columns}}
	{{if .IsFilter}}
	{{- if eq .DataType "string"}}
	res.Filter.{{pascal .Name}} = r.URL.Query().Get("{{.Name}}")
	{{else if eq .DataType "int"}}
	res.Filter.{{pascal .Name}}, ok = httphelper.IntQueryParam(w, r, "{{.Name}}")
	{{else if eq .DataType "float64"}}
	res.Filter.{{pascal .Name}}, ok = httphelper.FloatQueryParam(w, r, "{{.Name}}")
	{{else if eq .DataType "time.Time"}}
	res.Filter.{{pascal .Name}}, ok = httphelper.TimeQueryParam(w, r, "{{.Name}}")
	{{else if eq .DataType "bool"}}
	res.Filter.{{pascal .Name}}, ok = httphelper.BoolQueryParam(w, r, "{{.Name}}")
	{{end -}}
	if !ok {
		httphelper.ServeResponse(w, r, err)
		return
	}
	{{end}}
	{{end}}

	err = c.m.{{pascal .Model.TableName}}.List(r.Context(), res)
	httphelper.ServeJSON(w, r, res, err)
}

func (c *controller) create(w http.ResponseWriter, r *http.Request) {
	data := &{{remove_underscores .Model.TableName}}.{{pascal .Model.TableName}}{}
	if !httphelper.ParseBody(w, r, &data) {
		return
	}

	data, err := c.m.{{pascal .Model.TableName}}.Insert(r.Context(), *data)
	httphelper.ServeJSON(w, r, data, err)
}

func (c *controller) get(w http.ResponseWriter, r *http.Request) {
	id, ok := httphelper.IntParam(w, r, "id")
	if !ok {
		return
	}

	data, err := c.m.{{pascal .Model.TableName}}.Get(r.Context(), id)
	httphelper.ServeJSON(w, r, data, err)
}

func (c *controller) update(w http.ResponseWriter, r *http.Request) {
	data := &{{remove_underscores .Model.TableName}}.{{pascal .Model.TableName}}{}
	if !httphelper.ParseBody(w, r, &data) {
		return
	}

	id, ok := httphelper.IntParam(w, r, "id")
	if !ok {
		return
	}
	data.Id = id

	data, err := c.m.{{pascal .Model.TableName}}.Update(r.Context(), *data)
	httphelper.ServeJSON(w, r, data, err)
}

func (c *controller) delete(w http.ResponseWriter, r *http.Request) {
	id, ok := httphelper.IntParam(w, r, "id")
	if !ok {
		return
	}

	err := c.m.{{pascal .Model.TableName}}.Delete(r.Context(), id)
	httphelper.ServeResponse(w, r, err)
}
