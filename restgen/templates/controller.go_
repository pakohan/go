package {{remove_underscores .Model.TableName | plural}}

import (
	"encoding/json"
	"log"
	"net/http"
	"strconv"

	"{{.Model.ProjectImportPath}}/model"
	"{{.Model.ProjectImportPath}}/model/{{remove_underscores .Model.TableName}}"
	"{{.Model.ProjectImportPath}}/service"
	"github.com/pakohan/go/httphelper"
)

func New(l *log.Logger, m *model.Model, s *service.Service) http.Handler {
	c := &controller{
		l: l,
		m: m,
		s: s,
	}

	sm := http.NewServeMux()

	sm.HandleFunc("GET /", httphelper.Handle(c.list))
	sm.HandleFunc("POST /", httphelper.Handle(c.create))
	sm.HandleFunc("GET /{id}", httphelper.Handle(c.get))
	sm.HandleFunc("PUT /{id}", httphelper.Handle(c.update))
	sm.HandleFunc("DELETE /{id}", httphelper.Handle(c.delete))

	return sm
}

type controller struct {
	l *log.Logger
	m *model.Model
	s *service.Service
}

func (c *controller) list(r *http.Request) (interface{}, error) {
	res, err := httphelper.ListFromQuery[{{remove_underscores .Model.TableName}}.{{pascal .Model.TableName}}, {{remove_underscores .Model.TableName}}.Filter](r.URL.Query())
	if err != nil {
		return nil, err
	}
	res.Filter.PageSize = res.PageSize
	res.Filter.Page = res.Page

	{{range .Columns}}
	{{- if .IsFilter}}
	{{- if eq .DataType "string"}}
	res.Filter.{{pascal .Name}} = r.URL.Query().Get("{{.Name}}")
	{{- else if eq .DataType "int"}}
	res.Filter.{{pascal .Name}}, err = httphelper.IntQueryParam(r, "{{.Name}}")
	{{- else if eq .DataType "float64"}}
	res.Filter.{{pascal .Name}}, err = httphelper.FloatQueryParam(r, "{{.Name}}")
	{{- else if eq .DataType "time.Time"}}
	res.Filter.{{pascal .Name}}, err = httphelper.TimeQueryParam(r, "{{.Name}}")
	{{- else if eq .DataType "bool"}}
	res.Filter.{{pascal .Name}}, err = httphelper.BoolQueryParam(r, "{{.Name}}")
	{{- end}}
	{{- if ne .DataType "string"}}
	if err != nil {
		return nil, err
	}
	{{- end}}
	{{end}}
	{{- end}}

	return c.m.{{pascal .Model.TableName}}.List(r.Context(), res.Filter)
}

func (c *controller) create(r *http.Request) (interface{}, error) {
	data := &{{remove_underscores .Model.TableName}}.{{pascal .Model.TableName}}{}
	err := json.NewDecoder(r.Body).Decode(data)
	if err != nil {
		return nil, err
	}

	return c.m.{{pascal .Model.TableName}}.Insert(r.Context(), *data)
}

func (c *controller) get(r *http.Request) (interface{}, error) {
	id, err := strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return nil, err
	}

	return c.m.{{pascal .Model.TableName}}.Get(r.Context(), id)
}

func (c *controller) update(r *http.Request) (interface{}, error) {
	data := &{{remove_underscores .Model.TableName}}.{{pascal .Model.TableName}}{}
	err := json.NewDecoder(r.Body).Decode(data)
	if err != nil {
		return nil, err
	}

	data.Id, err = strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return nil, err
	}

	return c.m.{{pascal .Model.TableName}}.Update(r.Context(), *data)
}

func (c *controller) delete(r *http.Request) (interface{}, error) {
	id, err := strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return nil, err
	}

	return "OK", c.m.{{pascal .Model.TableName}}.Delete(r.Context(), id)
}
