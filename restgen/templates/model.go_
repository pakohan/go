package {{remove_underscores .Model.TableName}}

import (
	"context"
	"database/sql"
	"embed"
	"log"
	"time"

	"github.com/pakohan/go/modelhelper"
	"github.com/pakohan/go/sqlrepo"
)

//go:embed sql
var sqlDir embed.FS

type Model struct {
	l  *log.Logger
	db modelhelper.DB
	q  *sqlrepo.SQLRepository
}

type {{pascal .Model.TableName}} struct {
	{{range .Columns -}}
	{{pascal .Name}} {{if .IsNullable}}*{{end}}{{.DataType}} `json:"{{.Name}}" db:"{{.Name}}"`
	{{end -}}
}

type Filter struct {
	Page     int `json:"-" db:"page"`
	PageSize int `json:"-" db:"page_size"`
	{{range .Columns -}}
	{{if .IsFilter}}
	{{pascal .Name}} {{if eq .DataType "time.Time"}}*{{end}}{{.DataType}} `json:"{{.Name}}" db:"{{.Name}}"`
	{{- end -}}
	{{end -}}
}

func New(l *log.Logger, db modelhelper.DB) *Model {
	return &Model{
		l:  l,
		db: db,
		q:  sqlrepo.New(l, sqlDir, "sql"),
	}
}

func (m *Model) List(ctx context.Context, f Filter) ([]{{pascal .Model.TableName}}, error) {
	res := []{{pascal .Model.TableName}}{}
	err := m.db.NamedSelectContext(ctx, &res, m.q.Query("list", res), f)
	if err != nil {
		return nil, err
	}

	return res, nil
}


func (m *Model) Insert(ctx context.Context, data {{pascal .Model.TableName}}) (*{{pascal .Model.TableName}}, error) {
	res := &{{pascal .Model.TableName}}{}
	err := m.db.NamedGetContext(ctx, res, m.q.Query("insert"), data)
	if err != nil {
		return nil, err
	}

	return res, err
}
func (m *Model) Get(ctx context.Context, id int) (*{{pascal .Model.TableName}}, error) {
	res := &{{pascal .Model.TableName}}{}
	err := m.db.GetContext(ctx, res, m.q.Query("get"), id)
	if err != nil {
		return nil, err
	}

	return res, err
}

func (m *Model) Update(ctx context.Context, data {{pascal .Model.TableName}}) (*{{pascal .Model.TableName}}, error) {
	res := &{{pascal .Model.TableName}}{}
	err := m.db.NamedGetContext(ctx, res, m.q.Query("update"), data)
	if err == sql.ErrNoRows {
		res = nil
		err = nil
	} else if err != nil {
		return nil, err
	}

	return res, err
}

func (m *Model) Delete(ctx context.Context, id int) error {
	_, err := m.db.ExecContext(ctx, m.q.Query("delete"), id)
	if err != nil {
		return err
	}

	return err
}
